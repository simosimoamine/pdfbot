import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os
from dotenv import load_dotenv
from langchain_community.embeddings import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.chat_models import ChatOpenAI

# -------------------------------
# GESTION DE LA CL√â API OPENAI
# -------------------------------

# Charger les variables depuis un fichier .env (s'il existe)
load_dotenv()

# Essayer d'obtenir la cl√© depuis les variables d‚Äôenvironnement
openai_api_key = os.getenv("OPENAI_API_KEY")

# -------------------------------
# üé® CONFIGURATION DE L‚ÄôINTERFACE
# -------------------------------

# D√©finir les param√®tres de la page
st.set_page_config(
    page_title="PDFBot",  # Titre de l'onglet
    page_icon="ü§ñ",  # Ic√¥ne dans l'onglet
    layout="centered"  # Centrage de la page
)

# -------------------------------
# üß† TITRE ET DESCRIPTION
# -------------------------------

st.title("ü§ñ PDFBot ‚Äì Votre chatBot intelligent")
st.markdown(
    """Je votre assistant intelligent pour r√©pondre √† vos questions √† partir du document PDF que vous me fournissez!""")

# Si la cl√© est absente, demander √† l‚Äôutilisateur de la saisir dans la sidebar
if not openai_api_key:
    st.sidebar.title("Configuration API")
    openai_api_key = st.sidebar.text_input("Entrez votre cl√© OpenAI :", type="password")

# Si aucune cl√© n'est fournie, afficher une erreur et stopper l'app
if not openai_api_key:
    st.error("Veuillez entrer une cl√© API OpenAI pour continuer.")
    st.stop()

# -------------------------------
# üìÑ T√âL√âVERSEMENT DU FICHIER PDF
# -------------------------------

uploaded_files = st.file_uploader(
    "üìé T√©l√©versez un ou plusieurs fichiers PDF en m√™me temps",
    type=["pdf"],
    accept_multiple_files=True
)

# Si aucun fichier n'est encore envoy√©, afficher un message d‚Äôattente
if not uploaded_files:
    st.info("Veuillez s√©l√©ctionner un ou plusieurs fichiers PDF en m√™me temps! .")

# -------------------------------
# EXTRACTION DU TEXTE DU PDF
# -------------------------------

# Fonction utilitaire pour lire le PDF et en extraire le texte
def extract_text_from_multiple_pdfs(uploaded_files):
    """
    Prend une liste de fichiers PDF et retourne le texte combin√© de tous.
    """
    all_text = ""

    for uploaded_file in uploaded_files:
        reader = PdfReader(uploaded_file)
        for page in reader.pages:
            text = page.extract_text()
            if text:
                all_text += text + "\n"

    return all_text

# -------------------------------
# D√âCOUPAGE DU TEXTE EN CHUNKS
# -------------------------------
# Fonction utilitaire pour le d√©coupage du texte en chunks
def split_text_into_chunks(text, chunk_size=1000, chunk_overlap=200):
    """
    D√©coupe le texte en petits morceaux de taille contr√¥l√©e.

    - chunk_size : taille maximale d‚Äôun morceau (en caract√®res).
    - chunk_overlap : nombre de caract√®res qui se chevauchent entre deux morceaux cons√©cutifs.
    """
    splitter = RecursiveCharacterTextSplitter(
        chunk_size=chunk_size,
        chunk_overlap=chunk_overlap
    )
    chunks = splitter.create_documents([text])
    return chunks

# -------------------------------
# EMBEDDINGS + FAISS
# -------------------------------

def create_faiss_index(chunks, api_key):
    """
    Cr√©e une base FAISS √† partir des chunks de texte.
    Chaque chunk est transform√© en vecteur via OpenAIEmbeddings.
    """
    embeddings = OpenAIEmbeddings(openai_api_key=api_key)
    vectorstore = FAISS.from_documents(chunks, embeddings)
    return vectorstore

# ---------------------------
# Traitement du fichier PDF
# ---------------------------

# Si au moins un fichier est t√©l√©vers√©, on proc√®de au traitement
if uploaded_files:
    with st.spinner("Lecture et extraction du texte en cours..."):
        text = extract_text_from_multiple_pdfs(uploaded_files)

    if not text.strip():
        st.error("Le fichier PDF semble vide ou ne contient pas de texte lisible.")
        st.stop()

    with st.spinner("D√©coupage du texte est en cours..."):
        chunks = split_text_into_chunks(text)

    # Cr√©ation de l‚Äôindex vectoriel
    with st.spinner("Cr√©ation des embeddings et indexation vectorielle..."):
        vectorstore = create_faiss_index(chunks, openai_api_key)
        st.success("Base vectorielle FAISS cr√©√©e avec succ√®s.")

    # -------------------------------
    # üí¨ Saisie de la question
    # -------------------------------

    st.markdown("---")
    st.header("üí° Posez une question sur votre document")

    question = st.text_input("‚ùì Votre question :")

    # Traitement de la question et recherche de r√©ponse
    if question:
        with st.spinner("üîç Recherche de la r√©ponse..."):
            # 1. Recherche des documents les plus pertinents dans FAISS
            docs = vectorstore.similarity_search(question)

            # 2. Chargement du mod√®le de langage et de la cha√Æne de QA
            llm = ChatOpenAI(openai_api_key=openai_api_key, temperature=0)
            chain = load_qa_chain(llm, chain_type="stuff")

            # 3. G√©n√©ration de la r√©ponse
            result = chain.run(input_documents=docs, question=question)

            # 4. Affichage
            st.success("R√©ponse g√©n√©r√©e :")
            st.write(result)

            with st.expander("üîç Documents s√©lectionn√©s (chunks)"):
                for doc in docs:
                    st.write(doc.page_content[:500])
